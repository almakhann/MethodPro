print ("Hello world")
barplot(table(sample(1:3, size=1000, replace=TRUE, prob=c(.30,.60,.10))))
install.packages("crypto") #Coinmarketcup
install.packages("prophet") #TimeSeries
library(crypto)
df <- crypto::getCoins(coin = "bitcoin")
df <- crypto::getCoins(coin = "bitcoin")
df <- crypto::getCoins(coin = "bitcoin")
df
View(df)
install.packages("lubridate") #Handle date
library(prophet)
df$date <- ymd(df$date)
library(lubridate)
df$date <- ymd(df$date)
#Dlya raboty s prophet neobhodimy dve kolonki
#
colnames(df) <-  c("ds","y")
m <- prophet(df)
future <- make_future_dataframe(m,periods = 100)
m <- prophet(df)
colnames(df) <-  c("ds","y")
m <- prophet(df)
df <- crypto::getCoins(coin = "bitcoin")
df <- crypto::getHistory(coin = "bitcoin")
df <- crypto::getCoins(coin = "bitcoin")
df$date <- ymd(df$date)
library(prophet) #TimeSeries
colnames(df) <-  c("ds","y")
m <- prophet(df)
m <- prophet(df)
forecast <- predict(m,future)
df <- df[,c(4,9)]
m <- prophet(df)
colnames(df) <-  c("ds","y")
m <- prophet(df)
future <- make_future_dataframe(m,periods = 100)
forecast <- predict(m,future)
plot(m,future)
plot(m,future)
plot(m,forecast)
prophet_plot_components(m,forecast)
f <- select(forecast, c(ds,yhat))
f %>% top_n(60,ds)
library(dplyr)
f <- select(forecast, c(ds,yhat))
f %>% top_n(60,ds)
install.packages("drat", repos="https://cran.rstudio.com")
drat:::addRepo("dmlc")
install.packages("xgboost", repos="http://dmlc.ml/drat/", type="source")
library(xgboost)
#install.packages("keras")
#install.packages("tensorflow")
library(keras)
library(tensorflow)
library(mlbench)
library(dplyr)
library(magrittr)
library(neuralnet)
library(caret)
install_keras(method="conda")
pip3  --timeout 100
install_keras(method="conda")
install_tensorflow()
install_tensorflow(method='conda')
install_keras(method="conda")
install_keras(method="conda")
install.packages("keras")
install_keras(method="conda")
#install.packages("tensorflow")
library(keras)
install_keras()
install.packages("tensorflow")
install.packages("tensorflow")
install_keras(method='conda')
library(keras)
install_keras(method='conda')
library(tensorflow)
install_keras(method='conda')
install_keras(method='conda')
library(keras)
install_keras(method='conda')
library(keras)
library(tensorflow)
install.packages("tensorflow")
install.packages("tensorflow")
install_keras(method='conda')
install_tensorflow()
library(keras)
install_keras(method='conda')
install_tensorflow()
library(tensorflow)
install.packages("tensorflow")
install.packages("tensorflow")
library(keras)
library(tensorflow)
install_tensorflow()
install_keras(method='conda')
library(keras)
library(tensorflow)
library(mlbench)
library(dplyr)
library(magrittr)
library(neuralnet)
library(caret)
data("BostonHousing")
data <- BostonHousing
data %<>% mutate_if(is.factor,as.numeric)
attach(data)
rf <- randomForest::randomForest(medv~.,data)
randomForest::varImpPlot(rf)
# Neural network visualization
n <- neuralnet(medv ~ crim + zn + indus + chas + nox + rm + age + dis + rad + tax + ptratio + b + lstat,
data = data,
hidden = c(10,5),
linear.output = F,
lifesign = "full",
rep=1)
plot(n,
col.hidden = 'darkgreen',
col.hidden.synapse = 'darkgreen',
show.weights = F,
information = F,
fill = 'lightblue')
# Matrix
data <- as.matrix(data)
dimnames(data) <- NULL
# partition
set.seed(1234)
index <- createDataPartition(data[,14],p=0.8,list=FALSE)
train <- data[index,c(1:13)]
test <- data[-index,c(1:13)]
traintarget <- data[index,14]
testtarget <- data[-index,14]
# Normalize
m <- colMeans(train)
s <- apply(train, 2, sd)
train <- scale(train,center = m,scale = s)
test <- scale(test,center = m,scale = s)
model <- keras_model_sequential() # Среда для реализации
model <- keras_model_sequential() # Среда для реализации
install_keras(method='conda')
View(train)
View(df)
View(df)
#train Data Manipulation
train <- read.csv("train.csv")
View(train)
setwd("~/Desktop//MethodPro/Data Analyz labs/Titanic/")
#train Data Manipulation
train <- read.csv("train.csv")
View(train)
